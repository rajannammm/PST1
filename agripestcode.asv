clc;
clear all;
close all;
warning off;
addpath('subcodes');
%% INITIALIZATION
x0=10;
y0=10;
width=1000;
height=500;

%% LOAD INPUT DATA
infolder = 'F:\Nisha\Nisha\2024\Rooks projcts\project6((pest2)\pest2code\agripestcode\test';    
imgFiles = dir([infolder,filesep,'im' ,num2str(i),'.jpg']) ; 
N = length(imgFiles) ;   
for i = 1:N
    thisFile = [infolder,filesep,imgFiles(i).name] ;    
    [filepath,name,ext] = fileparts(thisFile) ;  
    I = imread(thisFile) ;   
end

[I,path]=uigetfile('*.jpg','select a input image');
str=strcat(path,I);
s=imread(str);
figure;
sgtitle('Input Image');
subplot(121);
imshow(s);                                                                                                                                                                                                                                                                                                     
title('Input Image in RGB ');

%% PREPROCESSING - Median Absolute Deviation (MAD) Filter
% Convert the RGB image to double
s_double = im2double(s);

% Reshape the RGB image into a 2D array
s_reshaped = reshape(s_double, [], 3);

% Call MAD_filter function to preprocess the image
mad_threshold = 3; % Adjust this threshold as needed
s_filtered_reshaped = MAD_filter(s_reshaped, mad_threshold);

% Reshape the filtered image back to its original dimensions
s_filtered = reshape(s_filtered_reshaped, size(s_double));

% Display the preprocessed image after MAD filtering
figure; 
imshow(s_filtered);
title('Preprocessed Image with MAD Filter');
%% Perform histogram equalization on each channel separately
% Separate color channels
R = s_filtered(:,:,1);
G = s_filtered(:,:,2);
B = s_filtered(:,:,3);

% Perform contrast enhancement on each channel
R_clahe = adapthisteq(R);
G_clahe = adapthisteq(G);
B_clahe = adapthisteq(B);

% Combine the enhanced channels back into a color image
s_clahe = cat(3, R_clahe, G_clahe, B_clahe);

% Display the CLAHE-enhanced color image
figure;
imshow(s_clahe);
title('CLAHE-enhanced Color Image');
%% Convert the filtered image to grayscale
s_gray = rgb2gray(s_clahe);
size_s_gray = size(s_gray);

disp(['Size of s_adjusted: ', num2str(size_s_gray)]);

%%
size_s_clahe = size(downsampled_s_gray);
%size_cluster_labels = size(cluster_labels);

disp(['Size of s_adjusted: ', num2str(downsampled_s_gray)]);
%disp(['Size of cluster_labels: ', num2str(size_cluster_labels)]);
%%
%% Downsample the grayscale image or extract fewer features
%% Convert the CLAHE-enhanced color image to grayscale
s_gray = rgb2gray(s_clahe);

%% Downsample the grayscale image to a smaller size
desired_size = [50, 48]; % Define the desired size [rows, columns]
downsampled_s_gray = imresize(s_gray, desired_size);

%% Convert the downsampled grayscale image to a feature matrix
feature_matrix = double(downsampled_s_gray(:));


%%
X = feature_matrix; % Replace with your input data matrix
num_clusters = 2; % Specify the number of clusters
kernel = 'rbf'; % Specify the kernel type ('rbf', 'linear', etc.)
gamma = 1; % Specify the gamma parameter

%% Perform clustering using the OOKGDC function
labels = OOKGDC(X, num_clusters, kernel, gamma);


% Instantiate the OOKGDC object
ookgdc_obj = OOKGDC(num_clusters, kernel, gamma);
ookgdc_obj.fit(X); % Perform clustering
labels = ookgdc_obj.labels_; % Retrieve cluster labels
% Predict cluster labels for each pixel
cluster_labels = ookgdc.predict(feature_matrix);

% Reshape the cluster labels back to the image dimensions
clustered_image = reshape(cluster_labels, size(s_clahe, 1), size(s_clahe, 2));

% Display the clustered image
figure;
imshow(label2rgb(clustered_image));
title('Clustered Image');

%% PERFORMANCE EVALUATION & COMPARISON
% Add your performance evaluation and comparison code here
%% Sequential memory allocation
binaryImage=y_est;
redAndBlueChannel = 255 * uint8(binaryImage);
greenChannel = 255 * ones(size(binaryImage), 'uint8');
rgbImage = cat(3, greenChannel, redAndBlueChannel, redAndBlueChannel);
figure;
imshow(rgbImage);
title('Detected Pest');

segim=seqmem(y_est);
edmundskarp(s,segim);
Features=deep(segim);
Target=ones(size(segim,1),1);

%% PERFORAMANCE EVALUATION & COMPARISON
[precision,specificity,Acc,f1score]= performaceanalysis(Features,Target);
disp('========= Performance Analysis of the Proposed Work  ========')
fprintf('\n')
disp(['Precision = ' num2str(precision)])
fprintf('\n')
disp(['Specificity = ' num2str(specificity)])
fprintf('\n')
disp(['Accuracy = ' num2str(Acc)])
fprintf('\n')
disp(['F1score = ' num2str(f1score)])

[Acc,sensitivity,specificity,f1score]= CNNclassification(Features,Target);
disp('%%% ===== CNN Classifier PERFORMANCE=====%%%')
disp([' Accuracy = ' num2str(Acc)])
disp([' Precision = ' num2str(sensitivity)])
disp([' Specificity = ' num2str(specificity)])
disp([' F1 score = ' num2str(f1score)])

[precision,specificity,Acc,f1score] = DeepLearning(Features,Target);
disp('========= Performance Analysis of DNN ========')
disp([' Accuracy = ' num2str(Acc)])
toc
disp([' Precision = ' num2str(precision)])
disp([' Specificity = ' num2str(specificity)])
disp([' F1 score = ' num2str(f1score)])

[precision,specificity,Acc,f1score]= ANN(Features,Target);
disp('========= Performance Analysis of ANN ========')
disp([' Accuracy = ' num2str(Acc)])
disp([' Precision = ' num2str(precision)])
disp([' Specificity = ' num2str(specificity)])
disp([' F1 score = ' num2str(f1score)])


